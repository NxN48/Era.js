# coding:utf-8
# 【第1章 第1节 准备工作】
# 欢迎来到 Era.js 的示例程序！
# 通过阅读本程序，你将学习到关于使用 Era.js 进行纯文本游戏开发的一切！
# 我们话不多说，先引入Era.js引擎的后端库，如下列语句所示：
import erajs.api as a
# import 完毕之后，引擎的全部 API 就已经可以使用了。
# 但在此之前，我还是推荐你将游戏文件的版本作为变量定义在下面的地方，如：
version = '0.1.0'
# 【推荐】请不要在此处定义任何游戏变量，引擎会有专门的命名空间共开发者储存数据，以方便实现全局调用和获得数据持久性支持。（下文将会详细提到）

# 准备工作完成了之后，接下来就是游戏的正式逻辑了，请将滚动到最末尾，并找到【第1章 第2节 游戏初始化】，以继续阅读！


# --------------------------我是分割线----------------------------


# 【第2章 第2节 游戏封面（中）】
# 欢迎回来！现在我们继续介绍界面。
# 我们在底部代码中通过使用 API 中的 goto 函数进入了一个名为 cover 的界面，这个函数定义如下：
def cover():
    # 这样，我们就有一个名为 cover 的函数了，刚才也说了，我们通过函数来搭载界面，于是我们接下来准备显示该界面的标题：
    a.title('Erajs-Tutorial v{} with Era.js v{}'.format(version, a.version))
    # 上面调用了 API 中的 title 函数，其作用是更改前端窗口的标题文字，至于为什么放在 cover 函数里呢？
    # 其实只要 init 了之后，放在哪里都可以。放在这里只是防止可能会有其它的一些会导致标题修改的界面出现。

    # 一般来说，上文中的 title 函数只需要调用一次就可以了，更普遍的情况是，代表界面的函数的第一行，就是调用下列函数：
    a.page()
    # 这是 API 中的 page 函数。其作用是新建一个空页，以后新建的所有显示元素都将在此空页中摆放。直到另一个新页面生成。

    # 接下来就是显示页面标题：
    a.h('Erajs-Tutorial v{}'.format(version))
    a.h
    # 上面调用了 API 中的 h(head) 函数，是用来显示页面标题的（其实就是字号比较大的文字啦！），其用法为：
    # a.h(text)

    # 再接下来就是显示一行普通文本：
    a.t('with Era.js v{}'.format(a.version))
    # 这是 API 中的 t(text) 函数。是用来显示普通文本的，其用法为：
    # a.t(text='', wait=False)
    # 当 text=='' 时，换行；
    # 当 wait==True 时，进入等待模式，文字会显示到这里就不再触发下一个语句，
    # 直到玩家点击鼠标左键（下一句）或是点击鼠标右键（略过全部）

    # 显示完标题之后，我们不希望将后续内容继续放在标题后边，于是选择换行：
    a.t()
    # 换两行也是可以的：
    a.t()

    # 接下来，我们希望显示一些按钮，来将玩家引向其他界面：
    # 再调用之前，我们先来看一下按钮函数是怎么使用的：
    # a.b(text, func, *arg, **kw)
    # 其中，text 就是你想显示在按钮上面的文字啦
    # func 就是该按钮在点击时会触发的函数
    # 还有几个隐藏的参数：
    # disabled 当该参数为真时，按钮变为不可用的状态
    # popup 鼠标指针移动到按钮上面时，将会弹出的文字
    # color 按钮颜色，值只能为：red，orange，yellow，olive，green，teal，blue，violet，purple，pink，brown，grey，black。
    a.b('展示页面逻辑', a.goto, ui_gui_logic)
    # 上面这个按钮函数，我们调用了 API 中的 goto 函数，并且将一个新页面的函数作为参数传给了它，
    # 这意味着当玩家点击这个按钮时，a.goto(gui_logic) 语句将会被执行。
    a.t()  # 换行（换行不只是可以给文字用哦！按钮、评级、进度条等等都可以用的哦！）
    a.b('显示全部控件', a.goto, ui_all_components)
    a.t()  # 换行
    a.b('游戏设置', None, disabled=True)
    a.t()  # 换行
    a.b('退出游戏', a.exit)


def ui_gui_logic():
    pass


def ui_all_components():
    pass


def rest():
    a.tick()
    a.page()
    m.rest()
    a.t('经过了半天。', True)
    a.repeat()


def save_game():
    a.page()
    a.h('保存游戏')
    a.t()
    a.show_save_to_save()
    a.b('返回', a.back)


def quit_game():
    pass


def load_game():
    a.page()
    a.h('读取游戏')
    a.t()
    a.show_save_to_load(load_for_load)
    a.b('返回', a.back)


# 【第1章 第2节 游戏初始化】
# 欢迎回来！接下来，我将为您介绍游戏的初始化。
# 游戏的初始化是全自动的，你只需要调用 API 中的这个函数：
a.init()
# 就可以实现对游戏引擎的初始化。
# 在初始化的过程中，将会依次进行以下行动
# 01. 统一全局路径
# 02. 自检（初始化游戏数据架构；检测运行必要目录是否存在；检测运行必要文件是否存在；若不存在就创建并初始化之）
# 03. 载入游戏设置（设置数据默认保存于 "config/config.ini" 文件中）
# 04. 在游戏数据架构中注册引擎 API，以实现一些不常用的骚操作。（这一个步骤可暂时忽视）
# 05. 扫描引擎插件。（引擎插件存放于 "erajs/plugin/" 目录中）
# 06. 加载引擎插件。（当检测到目录中存在该引擎插件，且在游戏设置数据中该插件处于启用的状态下，则自动加载并运行。）
# 07. 连接到前端服务器。（在执行此命令之前，前端程序应已经打开。）
# 08. 推送游戏设置至前端服务器。（游戏开发者可暂时忽视）
# 09. 加载游戏数据文件（游戏数据文件保存在 "erajs/plugin/" 目录中，该目录下的一切受支持的文件都将自动扫描并加载到游戏数据架构中，一旦载入，即可全局调用。）
# 10. 扫描游戏脚本文件。（游戏脚本文件是指实现独立功能、数据改动或与实现游戏主要逻辑无关的小文件）
# 11. 加载游戏脚本文件。（所有被扫描到的游戏脚本文件都将被在此时加载）
# 12. 扫描DLC。（机制同扫描引擎插件）
# 13. 加载DLC。（机制同加载引擎插件）
# 14. 扫描MOD。（机制同扫描DLC）
# 15. 加载MOD。（机制同加载DLC）
# 16. 向前端发送加载完成信号，准备显示游戏封面。
# 至此，游戏引擎初始化完毕！
# 【注意】API 中的绝大部分函数都应在 init 函数调用之后调用，不然会报错。init 函数只需要执行一次。

# 【第2章 第1节 游戏封面（上）】
# 在这里，请允许我向您介绍游戏的界面逻辑。
# 一般的，Era类游戏的界面与界面之间的逻辑是树状的逻辑，如：
# 封面
#   ├─ 开始游戏
#   │    ├─ 使用默认人物
#   │    └─ 新建自定义人物
#   ├─ 读取游戏
#   ├─ 游戏设置
#   └─ 退出游戏
# 或是：
# 游戏循环主界面
#   ├─ 探险
#   │    ├─ 查看敌人
#   │    └─ 战斗
#   ├─ 查看人物
#   ├─ 商店
#   └─ ？？？
# 但在实际开发过程中，界面与界面之间的逻辑常常会比较混乱，如：
# 从一个界面到另一个界面的转换，常常是通过显式调用的方式，这种方式有以下不方便的地方：
# 1. 上一界面应当知道自己将显示流引入了哪一个界面，才能够实现进入某一页面的逻辑
# 2. 下一个界面必须知道显示流是从哪一个界面来的，才能够实现返回上一页面的逻辑
# 因此，要实现一个进入该页面/退出到上一页面的操作，就常常需要把两个页面写死，这样就带来了开发的成本提高，降低了灵活度。
# Era.js 引擎内置了游戏界面管理机制，你只需要写出每个界面所包含的内容，并通过合适的方式进行调用，
# 游戏引擎就会自动对界面逻辑进行记忆，从而简单实现进入页面/退出到上一页面/上一页/下一页/返回根页面等操作。

# 现在，我们对其进行详细讲解：
# 我们提出了一个概念：界面=函数
# 即将一个页面绑定在一个函数上。如以下语句所示：
a.goto(cover)
# 我们调用了 API 中的 goto 函数，并指向了另一个名为 cover 的函数，
# 这样，我们就进入了我们的页面体系的首个页面：cover
# 接下来，请将本文件中的代码滚动到顶端，寻找【第2章 第2节 游戏封面（下）】并继续阅览！
